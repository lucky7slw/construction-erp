version: '3.8'

services:
  # Blue API instance
  api-blue:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: hhhomes-api-blue
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://erpuser:${DB_PASSWORD}@postgres:5432/erp_production
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      UPLOAD_DIR: /app/uploads
    volumes:
      - uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

  # Green API instance (for zero-downtime deployments)
  api-green:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: hhhomes-api-green
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://erpuser:${DB_PASSWORD}@postgres:5432/erp_production
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      UPLOAD_DIR: /app/uploads
    volumes:
      - uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    profiles:
      - deployment  # Only start during deployments

  # Blue Web instance
  web-blue:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: hhhomes-web-blue
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${DOMAIN}
    depends_on:
      api-blue:
        condition: service_healthy
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s

  # Green Web instance
  web-green:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: hhhomes-web-green
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.${DOMAIN}
    depends_on:
      api-green:
        condition: service_healthy
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    profiles:
      - deployment

  # Enhanced Nginx with upstream failover
  nginx:
    image: nginx:alpine
    container_name: hhhomes-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - certbot_conf:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
    depends_on:
      - api-blue
      - web-blue
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL with replication-ready config
  postgres:
    image: postgres:15-alpine
    container_name: hhhomes-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: erp_production
      POSTGRES_USER: erpuser
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # Enable connection pooling
      POSTGRES_MAX_CONNECTIONS: 200
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erpuser -d erp_production"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: hhhomes-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Automated backup service
  backup:
    image: postgres:15-alpine
    container_name: hhhomes-backup
    restart: unless-stopped
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: erp_production
      POSTGRES_USER: erpuser
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      BACKUP_SCHEDULE: "0 2 * * *"  # Daily at 2 AM
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: sh -c "while true; do /backup.sh; sleep 86400; done"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hhhomes-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: hhhomes-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - hhhomes-network
    ports:
      - "9090:9090"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hhhomes-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - hhhomes-network
    ports:
      - "3030:3000"

  # Certbot for SSL
  certbot:
    image: certbot/certbot:latest
    container_name: hhhomes-certbot
    volumes:
      - certbot_conf:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - hhhomes-network

volumes:
  postgres_data:
  redis_data:
  uploads:
  prometheus_data:
  grafana_data:
  certbot_conf:
  certbot_www:

networks:
  hhhomes-network:
    driver: bridge
