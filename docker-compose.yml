services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hhhomes-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: erp_production
      POSTGRES_USER: erpuser
      POSTGRES_PASSWORD: ${DB_PASSWORD:-ChangeThisPassword123!}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erpuser -d erp_production"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Backend
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: hhhomes-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      DATABASE_URL: postgresql://erpuser:${DB_PASSWORD:-ChangeThisPassword123!}@postgres:5432/erp_production
      JWT_SECRET: ${JWT_SECRET:-change-this-super-secret-jwt-key}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change-this-super-secret-refresh-key}
      UPLOAD_DIR: /app/uploads
    volumes:
      - uploads:/app/uploads
      - ./apps/api/.env:/app/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: hhhomes-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: https://api.${DOMAIN:-yourdomain.com}
    depends_on:
      - api
    networks:
      - hhhomes-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hhhomes-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - api
      - web
    networks:
      - hhhomes-network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # Certbot for SSL
  certbot:
    image: certbot/certbot
    container_name: hhhomes-certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  hhhomes-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  uploads:
    driver: local
