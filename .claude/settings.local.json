{
  "permissions": {
    "allow": [
      "Bash(PATH=\"/c/Program Files/Docker/Docker/resources/bin:$PATH\" docker exec spice-erpnext sh -c 'cd /home/frappe/frappe-bench && echo \"\"\nimport frappe\n\nprint(\\\"\"=== Testing SPICE DocType Accessibility After Migration ===\\\"\")\n\n# Test the specific DocTypes that were failing\ntest_doctypes = [\\\"\"SPICE Audit Log\\\"\", \\\"\"SPICE Activity Log\\\"\", \\\"\"SPICE Project\\\"\", \\\"\"SPICE Configuration\\\"\", \\\"\"SPICE Security Alert\\\"\"]\n\nworking_count = 0\nfor doctype in test_doctypes:\n    try:\n        # Test meta access\n        meta = frappe.get_meta(doctype)\n        \n        # Test document creation\n        doc = frappe.new_doc(doctype)\n        \n        # Test basic functionality\n        print(f\\\"\"✓ {doctype}: WORKING - {len(meta.fields)} fields, can create documents\\\"\")\n        working_count += 1\n        \n    except Exception as e:\n        print(f\\\"\"✗ {doctype}: ERROR - {str(e)[:80]}\\\"\")\n\nprint(f\\\"\"\\\\nResult: {working_count}/{len(test_doctypes)} DocTypes working\\\"\")\n\n# Test workspace accessibility\ntry:\n    workspace = frappe.get_doc(\\\"\"Workspace\\\"\", \\\"\"SPICE\\\"\")\n    print(f\\\"\"\\\\n✓ SPICE Workspace accessible: {workspace.title}\\\"\")\n    print(f\\\"\"  Public: {workspace.public}, Module: {workspace.module}\\\"\")\nexcept Exception as e:\n    print(f\\\"\"\\\\n✗ SPICE Workspace error: {e}\\\"\")\n\nprint(\\\"\"\\\\n=== Migration Status: SUCCESS ===\\\"\" if working_count == len(test_doctypes) else \\\"\"\\\\n=== Some Issues Remain ===\\\"\")\n\"\" | bench --site localhost console')",
      "Bash(PATH=\"/c/Program Files/Docker/Docker/resources/bin:$PATH\" docker exec spice-erpnext sh -c 'cd /home/frappe/frappe-bench && echo \"\"\nimport frappe\n\n# Test the main working DocTypes\nworking = []\nbroken = []\n\ntest_list = [\\\"\"SPICE Activity Log\\\"\", \\\"\"SPICE Project\\\"\", \\\"\"SPICE Configuration\\\"\"]\nfor dt in test_list:\n    try:\n        meta = frappe.get_meta(dt)\n        frappe.new_doc(dt)\n        working.append(dt)\n    except:\n        broken.append(dt)\n\nprint(f\\\"\"Working DocTypes: {len(working)}\\\"\")\nfor dt in working:\n    print(f\\\"\"  ✓ {dt}\\\"\")\n\nif broken:\n    print(f\\\"\"Broken DocTypes: {len(broken)}\\\"\")\n    for dt in broken:\n        print(f\\\"\"  ✗ {dt}\\\"\")\n\nprint(f\\\"\"\\\\nStatus: {len(working)} of {len(test_list)} core DocTypes working\\\"\")\n\"\" | bench --site localhost console')",
      "Bash(npx husky:*)",
      "Bash(pnpm install:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(pnpm type-check:*)",
      "Bash(pnpm --filter @hhhomespm/shared type-check)",
      "Bash(pnpm lint:*)",
      "Bash(pnpm --filter @hhhomespm/shared lint)",
      "Bash(pnpm --filter @hhhomespm/eslint-config install)",
      "Bash(pnpm --filter @hhhomespm/api lint)",
      "Bash(pnpm test:*)",
      "Bash(pnpm --filter @hhhomespm/shared test)",
      "Bash(docker:*)",
      "Bash(pnpm docker:dev:*)",
      "Bash(pnpm docker:dev:down:*)",
      "Bash(pnpm --filter @hhhomespm/ui test)",
      "Bash(git add:*)",
      "Bash(git reset:*)",
      "Bash(git commit:*)",
      "Bash(pnpm run:*)",
      "Bash(pnpm list:*)",
      "Bash(pnpm add:*)",
      "Bash(npx prisma:*)",
      "Read(//c/Users/SW/Desktop/epic-erp/**)",
      "Bash(git checkout:*)",
      "Bash(git merge:*)",
      "Bash(pnpm db:generate:*)",
      "Bash(docker-compose:*)",
      "Bash(pnpm db:migrate:*)",
      "Bash(pnpm db:push:*)",
      "Bash(pnpm db:seed:*)",
      "Bash(pnpm dev:*)",
      "Bash(curl:*)",
      "Bash(timeout 10 pnpm dev)",
      "Bash(pkill:*)",
      "Bash(netstat:*)",
      "Bash(timeout 15 pnpm dev)",
      "Bash(taskkill:*)",
      "Bash(bash:*)",
      "Bash(tree:*)",
      "Bash(pnpm prisma generate:*)",
      "Bash(pnpm vitest:*)",
      "Bash(timeout 30 npm test)",
      "Bash(kill:*)",
      "Bash(timeout 10 npm run dev)",
      "Bash(timeout 15 npm run dev)",
      "Bash(awk:*)",
      "Bash(xargs kill:*)",
      "Bash(GEMINI_API_KEY=test-key npm run build)",
      "Bash(cat:*)",
      "Bash(find:*)",
      "Bash(npx vitest run:*)",
      "Bash(PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION=\"yes\" npx prisma migrate reset --force)",
      "Read(//c/**)",
      "WebSearch",
      "Bash(PGPASSWORD=postgres psql -h localhost -U postgres -d erp_development -f prisma/migrations/20251001040000_add_takeoffs/migration.sql)",
      "Bash(PATH=\"/c/Program Files/Docker/Docker/resources/bin:$PATH\" docker ps)",
      "Bash(xargs:*)",
      "Bash(npx tsc:*)",
      "Bash(findstr:*)",
      "Bash(timeout:*)",
      "Bash(npx @playwright/test:*)",
      "Bash(npx:*)",
      "Bash(echo \"\nSELECT id, name FROM companies WHERE id = ''''cmgbq5uri00065swov897ufhq'''';\n\")",
      "Bash(echo:*)",
      "Bash(powershell:*)",
      "Bash(PORT=3002 npm run dev)",
      "Bash(pnpm remove:*)",
      "Bash(mkdir:*)",
      "Bash(pnpm tsx:*)",
      "Bash(pnpm prisma migrate dev:*)",
      "Bash(pnpm prisma migrate:*)",
      "Bash(PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION=\"yes\" pnpm prisma migrate reset --force)",
      "Bash(PRISMA_USER_CONSENT_FOR_DANGEROUS_AI_ACTION=\"yes\" pnpm prisma migrate reset --force --skip-seed)",
      "Bash(rm:*)",
      "Bash(sed:*)",
      "Bash(git push:*)"
    ],
    "deny": [],
    "ask": []
  }
}
