{
  "permissions": {
    "allow": [
      "Bash(PATH=\"/c/Program Files/Docker/Docker/resources/bin:$PATH\" docker exec spice-erpnext sh -c 'cd /home/frappe/frappe-bench && echo \"\"\nimport frappe\n\nprint(\\\"\"=== Testing SPICE DocType Accessibility After Migration ===\\\"\")\n\n# Test the specific DocTypes that were failing\ntest_doctypes = [\\\"\"SPICE Audit Log\\\"\", \\\"\"SPICE Activity Log\\\"\", \\\"\"SPICE Project\\\"\", \\\"\"SPICE Configuration\\\"\", \\\"\"SPICE Security Alert\\\"\"]\n\nworking_count = 0\nfor doctype in test_doctypes:\n    try:\n        # Test meta access\n        meta = frappe.get_meta(doctype)\n        \n        # Test document creation\n        doc = frappe.new_doc(doctype)\n        \n        # Test basic functionality\n        print(f\\\"\"✓ {doctype}: WORKING - {len(meta.fields)} fields, can create documents\\\"\")\n        working_count += 1\n        \n    except Exception as e:\n        print(f\\\"\"✗ {doctype}: ERROR - {str(e)[:80]}\\\"\")\n\nprint(f\\\"\"\\\\nResult: {working_count}/{len(test_doctypes)} DocTypes working\\\"\")\n\n# Test workspace accessibility\ntry:\n    workspace = frappe.get_doc(\\\"\"Workspace\\\"\", \\\"\"SPICE\\\"\")\n    print(f\\\"\"\\\\n✓ SPICE Workspace accessible: {workspace.title}\\\"\")\n    print(f\\\"\"  Public: {workspace.public}, Module: {workspace.module}\\\"\")\nexcept Exception as e:\n    print(f\\\"\"\\\\n✗ SPICE Workspace error: {e}\\\"\")\n\nprint(\\\"\"\\\\n=== Migration Status: SUCCESS ===\\\"\" if working_count == len(test_doctypes) else \\\"\"\\\\n=== Some Issues Remain ===\\\"\")\n\"\" | bench --site localhost console')",
      "Bash(PATH=\"/c/Program Files/Docker/Docker/resources/bin:$PATH\" docker exec spice-erpnext sh -c 'cd /home/frappe/frappe-bench && echo \"\"\nimport frappe\n\n# Test the main working DocTypes\nworking = []\nbroken = []\n\ntest_list = [\\\"\"SPICE Activity Log\\\"\", \\\"\"SPICE Project\\\"\", \\\"\"SPICE Configuration\\\"\"]\nfor dt in test_list:\n    try:\n        meta = frappe.get_meta(dt)\n        frappe.new_doc(dt)\n        working.append(dt)\n    except:\n        broken.append(dt)\n\nprint(f\\\"\"Working DocTypes: {len(working)}\\\"\")\nfor dt in working:\n    print(f\\\"\"  ✓ {dt}\\\"\")\n\nif broken:\n    print(f\\\"\"Broken DocTypes: {len(broken)}\\\"\")\n    for dt in broken:\n        print(f\\\"\"  ✗ {dt}\\\"\")\n\nprint(f\\\"\"\\\\nStatus: {len(working)} of {len(test_list)} core DocTypes working\\\"\")\n\"\" | bench --site localhost console')"
    ],
    "deny": [],
    "ask": []
  }
}